#! /bin/bash
### BEGIN INIT INFO
# Provides:          oraKWlum-frontend
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: oraKWlum-fronted server
# Description:       Starts oraKWlum web interface and Mongo REST API
### END INIT INFO


# oraKWlum-frontend path
ORA_PATHH=/opt/oraKWlum-frontend

# Virtualenv path
VIRTUAL_ENV=/home/orakwlum/orakwlum
ENV_PATHH=$VIRTUAL_ENV/bin

USER=orakwlum
GROUP=$USER


#### Don't touch it! ####
export PATH=$ENV_PATHH:$PATH
export VIRTUAL_ENV

DAEMON=$ENV_PATHH/python2.7
ARGS=$ORA_PATHH/start.py

NAME="oraKWlum-frontend"

PIDFILE=/var/run/oraKWlum-frontend.pid
LOG=/var/log/oraKWlum-frontend.log

start_server (){
    echo "Starting $NAME server"
    /sbin/start-stop-daemon --start --pidfile $PIDFILE \
        --user $USER --group $GROUP \
        -b --make-pidfile \
        --chuid $USER \
        --exec $DAEMON $ARGS > $LOG
}

stop_server (){
    echo "Stopping $NAME server"
    /sbin/start-stop-daemon --stop --pidfile $PIDFILE
}

status_server () {
    if [ ! -f $PIDFILE ]; then
	state="KO"
	rc=1
    else  
    	if ps -p `cat $PIDFILE` > /dev/null; then
		state="OK"
		rc=0
        else
		state="KO"
		rc=1
        fi
    fi

    if [ ! "$1" ]; then
	    echo "$NAME is $state"
    fi
    return $rc
}

case "$1" in
  start)
	start_server
    ;;
  stop)
        if status_server "silent"; then
		stop_server
        else
		echo "$NAME is currently DOWN"
	fi
    ;;
  restart)
	stop_server
	sleep 3	 #to avoid troubles at restart on the same port
	start_server
    ;;
  status)
	status_server
    ;;
  *)
    echo "Usage: $0 {start|stop|status}"
    exit 1
    ;;
esac

exit 0
